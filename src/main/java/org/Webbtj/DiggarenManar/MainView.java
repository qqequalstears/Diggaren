package org.Webbtj.DiggarenManar;

import com.fasterxml.jackson.databind.JsonNode;
import com.vaadin.flow.component.button.Button;
import com.vaadin.flow.component.html.Anchor;
import com.vaadin.flow.component.html.Label;
import com.vaadin.flow.component.orderedlayout.VerticalLayout;
import com.vaadin.flow.component.textfield.TextField;
import com.vaadin.flow.router.Route;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.net.URI;
import java.net.URLEncoder;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.util.Map;

@Route("")
public class MainView extends VerticalLayout {

    private TextField channelField;
    private Button fetchButton;
    private Label songInfo;
    private Anchor spotifyLinkAnchor;

    public MainView() {
        // üîπ Skapa textf√§lt f√∂r kanal-ID
        channelField = new TextField("Ange radiokanal");

        // üîπ Skapa knapp f√∂r att h√§mta l√•tinfo
        fetchButton = new Button("H√§mta l√•t");

        // üîπ Skapa etikett f√∂r att visa l√•tinfo
        songInfo = new Label();

        // üîπ Skapa en l√§nk till Spotify
        spotifyLinkAnchor = new Anchor("", "√ñppna i Spotify");
        spotifyLinkAnchor.setTarget("_blank"); // üîπ √ñppnar l√§nken i en ny flik

        // üîπ L√§gg till klicklyssnare f√∂r att h√§mta l√•ten
        fetchButton.addClickListener(e -> fetchSong());

        // üîπ L√§gg till alla komponenter i UI
        add(channelField, fetchButton, songInfo, spotifyLinkAnchor);
        updateSongInfo("164");
    }
    private void updateSongInfo(String channelId) {
        try {
            String url = "http://localhost:8080/api/song?channel=" + channelId;

            HttpClient client = HttpClient.newHttpClient();
            HttpRequest request = HttpRequest.newBuilder()
                                             .uri(URI.create(url))
                                             .GET()
                                             .build();

            HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());

            if (response.statusCode() != 200) {
                songInfo.setText("‚ö†Ô∏è API svarade med statuskod: " + response.statusCode());
                return;
            }

            ObjectMapper objectMapper = new ObjectMapper();
            JsonNode jsonNode = objectMapper.readTree(response.body());

            if (jsonNode.has("error")) {
                songInfo.setText("‚ö†Ô∏è " + jsonNode.get("error").asText());
            } else {
                String artist = jsonNode.path("artist").asText("Ok√§nd artist");
                String title = jsonNode.path("title").asText("Ok√§nd l√•t");
                String playedTime = jsonNode.path("playedTime").asText("N/A");

                // üîπ Uppdatera UI med l√•tinfo och klockslag
                songInfo.setText("üéµ " + artist + " - " + title + " (Spelades: " + playedTime + ")");
            }

        } catch (Exception e) {
            songInfo.setText("‚ùå Fel vid h√§mtning av l√•tdata");
            e.printStackTrace();
        }
    }

    private void fetchSong() {
        String channelId = channelField.getValue().trim(); // üîπ H√§mta och trimma kanal-id

        if (channelId.isEmpty()) {
            songInfo.setText("‚ö†Ô∏è Ange ett giltigt kanal-ID!");
            return;
        }

        try {
            String url = "http://localhost:8080/api/song?channel=" + URLEncoder.encode(channelId, StandardCharsets.UTF_8);

            HttpClient client = HttpClient.newHttpClient();
            HttpRequest request = HttpRequest.newBuilder()
                                             .uri(URI.create(url))
                                             .GET()
                                             .build();

            HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());

            if (response.statusCode() != 200) {
                songInfo.setText("‚ö†Ô∏è API svarade med statuskod: " + response.statusCode());
                return;
            }

            ObjectMapper objectMapper = new ObjectMapper();
            JsonNode jsonNode = objectMapper.readTree(response.body());

            if (jsonNode.has("error")) {
                songInfo.setText("‚ö†Ô∏è " + jsonNode.get("error").asText());
                spotifyLinkAnchor.setHref(""); // üîπ Rensa Spotify-l√§nken
            } else {
                String artist = jsonNode.path("artist").asText("Ok√§nd artist");
                String title = jsonNode.path("title").asText("Ok√§nd l√•t");
                String playedTime = jsonNode.path("playedTime").asText("N/A");
                String spotifyLink = jsonNode.path("spotifyLink").asText("");

                // üîπ Uppdatera UI med l√•tinfo och Spotify-l√§nk
                songInfo.setText("üéµ " + artist + " - " + title + " (Spelades: " + playedTime + ")");
                spotifyLinkAnchor.setHref(spotifyLink);
            }

        } catch (Exception e) {
            songInfo.setText(" Fel vid h√§mtning av l√•tdata");
            e.printStackTrace();
        }
    }

    private void startAutoUpdate() {
        Thread thread = new Thread(() -> {
            while (true) {
                try {
                    String selectedChannel = channelField.getValue().split(" ")[1].replace("(", "").replace(")", "");
                    updateSongInfo(selectedChannel); // üîπ Anropar metoden varje g√•ng den k√∂rs
                    Thread.sleep(10000); // üîπ V√§nta 10 sekunder innan n√§sta uppdatering
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        });
        thread.setDaemon(true);
        thread.start();
    }
}
